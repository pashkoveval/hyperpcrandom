import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const errors_msgs = [
  `ü§¨ü§¨ü§¨ –≠—Ç–æ –Ω–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ —Å—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—É—é –°–°–´–õ–ö–£ –¥–∞, –ê—Ä—Ç–µ–º? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫, CTRL + C –∞ –∑–∞—Ç–µ–º –ø–æ–º–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≠–¢–û–ô –ì–†–ï–ë–ê–ù–û–ô –°–°–´–õ–ö–ò –∏ CTRL + V. ü§¨ü§¨ü§¨`,
  `ü§¨ü§¨ü§¨–û—à–∏–±–∫–∞ !!!!! GF6404 !!!!! –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ !!!!!`,
  `–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ –µ—â–µ —Ä–∞–∑.`,
  `WEB —ç—Ç–æ –Ω–µ —Ç–≤–æ–µ –¥–∞? –¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ Google?`
]

const getRandomInt = (max) => {
  return Math.floor(Math.random() * max);
}

export default new Vuex.Store({
  state: {
    badUrlCounter: 0,
    video: null,
    videoURL: null,
    badUrl: null,
    errorsMSG: null,
    wrongAPIKey: null,
    sowComments: false,
    limitExceededFlag: false,
    apiKey: '',
    pageToken: '',
    textToFilter: '',
    limitExceededMsg: '–û—à–∏–±–∫–∞ GF6404!!!',
    hyperPCID: 'UCRS-7r-HT7VXZF2ZDVogueg',
    comments: [],
    subscribers: [],
    dateToFilter: [],
  },

  mutations: {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏
    CHECK_API_LOCKAL(state) {
      const apiStorage = localStorage.getItem('api');
      const pastDate = localStorage.getItem('date');
      const nowDate = Date.now();
      const pastTime = nowDate - pastDate;

      if (pastTime >= 86400000) {
        state.wrongAPIKey = true;
        localStorage.removeItem('api');
        localStorage.removeItem('date');
      } else {
        if (apiStorage) {
          state.apiKey = apiStorage;
          state.wrongAPIKey = null;
        }
      }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ API
    PUT_API(state, v) {
      state.apiKey = v
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ API –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    SAVE_CHECKED_API(state) {
      localStorage.setItem('api', state.apiKey);
      localStorage.setItem('date', Date.now());
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ url –æ—Ç –≤–∏–¥–µ–æ
    SAVE_VIDEO_URL(state, url) {
      state.videoURL = url;
    },

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞
    CLEAN_BAD_API_FLAG(state) {
      state.wrongAPIKey = null
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ
    GET_VIDEO(state, v) {
      state.video = v
      state.badUrl = null
      state.badUrlCounter = 0
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    DELETE_VIDEO(state) {
      state.video = null
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
    SERVER_ERROR_VALIDATEON(state, msg) {
      switch (msg.errors[0].reason) {
        case "quotaExceeded":
          state.limitExceededFlag = true
          state.limitExceededMsg = '–û—à–∏–±–∫–∞ GF6404!!!  –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.'
          break;
        case "badRequest":
          state.wrongAPIKey = true
          state.errorsMSG = `–≠—Ç–æ –Ω–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ —Å—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –ü–ê–†–û–õ–¨ –¥–∞, –ê—Ä—Ç–µ–º? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫, CTRL + C –∞ –∑–∞—Ç–µ–º –ø–æ–º–µ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ –∏ CTRL + V. ü§¨ü§¨ü§¨`
          break;
        case "badUrl":
          state.badUrl = true
          state.badUrlCounter += 1
          state.errorsMSG = errors_msgs[getRandomInt(3)]
          break;
        case "badUrlAgain":
          state.badUrl = true
          state.badUrlCounter = 0
          state.errorsMSG = `ü§¨ü§¨ü§¨ –ë%#"@! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ê—Ö –¥–∞ —è –∂–µ –≥–æ–≤–æ—Ä–∏–ª –ø—Ä–æ —Ç–æ —á—Ç–æ –ø–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è –¥–æ–±–æ–≤–ª—è—Ç—å? –®—É—Ç–∫–∞... –ù–æ —á—Ç–æ-—Ç–æ —Ç–æ—á–Ω–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.`
          break;
        default:
          break;
      }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ 
    PUSH_COMENTS(state, v) {
      if (v) {
        state.comments = [...state.comments, ...v]
      }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ 
    FIND_SUBSCRIBERS_ON_CHENEL(state, v) {
      state.subscribers = [...state.subscribers, v]
    },

    // –û—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
    CLEAN_ERROS_MSG(state) {
      state.errorsMSG = null
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    SHOW_COMMENTS(state) {
      state.sowComments = !state.sowComments
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SAVE_INCLUDED_TEXT(state, v) {
      state.dateToFilter = v
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SAVE_INCLUDED_DATE(state, v) {
      state.textToFilter = v
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SAVE_PAGE_TOKEN(state, v) {
      state.pageToken = v
    },
  },

  actions: {
    // –í—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø—Ä–æ—à–ª–æ–π —Å–µ—Å—Å–∏–∏
    CHECK_API_LOCKAL_ACTION({ commit }) {
      commit('CHECK_API_LOCKAL')
    },

    // –í—ã–∑–æ–≤ –æ—á–∏—Å—Ç–∫–∏ —Ñ–ª–∞–≥–∞ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞
    CLEAN_BAD_API_FLAG_ACTION({ commit }) {
      commit('CLEAN_BAD_API_FLAG')
    },

    // –í—ã–∑–æ–≤ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
    CLEAN_ERROS_MSG_ACTION({ commit }) {
      commit('CLEAN_ERROS_MSG')
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –∫–ª—é—á–∞ API –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async TEST_API_KEY_ACTION({ commit }, api, url = 'KbyclDTvzU8') {
      await fetch(`https://youtube.googleapis.com/youtube/v3/videos?part=snippet&key=${api}&id=${url}`)
        .then(res => res.json())
        .then(json => {
          commit('SAVE_CHECKED_API')
          if (json.error) {
            commit('SERVER_ERROR_VALIDATEON', json.error)
          } else {
            commit('PUT_API', api)
            commit('SAVE_CHECKED_API')
          }
        })
        .catch(e => {
          throw e
        })
    },

    // –í—ã–∑–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
    DELETE_VIDEO_ACTION({ commit }) {
      commit('DELETE_VIDEO')
    },

    // –°–û—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –≤—Å–µ—Ö –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
    GET_COMMENTATORS_ID_ACTION({ state }) {
      let allSubscrubersIds = [];
      const comments = state.comments;
      if (comments.length) {
        comments.forEach(el => {
          allSubscrubersIds = [...allSubscrubersIds, el.snippet.topLevelComment.snippet.authorChannelId.value]
        })
      }
      console.log('allSubscrubersIds', allSubscrubersIds);

      // if (allSubscrubersIds.length) {
      //   allSubscrubersIds.forEach(el => {
      //     dispatch('CHECK_SUBSCRIPTION', el)
      //   })
      // }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
    async CHECK_SUBSCRIPTION({ state, commit, dispatch }, id, nextPage = '') {
      const apiKey = state.apiKey;
      const currentId = id;
      await fetch(`https://youtube.googleapis.com/youtube/v3/subscriptions?part=snippet%2CcontentDetails&maxResults=100&channelId=${currentId}&key=${apiKey}&pageToken=${nextPage}`)
        .then(res => res.json())
        .then(json => {
          if (json.error) {
            commit('SERVER_ERROR_VALIDATEON', json.error)
          }
          commit('FIND_SUBSCRIBERS_ON_CHENEL', json)
          if (json.nextPageToken) {
            dispatch('CHECK_SUBSCRIPTION', currentId, json.nextPageToken)
          }
        })
        .catch(e => {
          throw e
        })
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    async GET_VIDEO_ACTION({ commit, state }, videoURL) {
      const apiKey = state.apiKey;
      const url = videoURL
      await fetch(`https://youtube.googleapis.com/youtube/v3/videos?part=snippet&key=${apiKey}&id=${url}`)
        .then(res => res.json())
        .then(json => {
          if (json.error) {
            commit('SERVER_ERROR_VALIDATEON', json.error)
            return
          } else if (json.items && json.items.length) {
            console.log('json.items[0]', json.items[0]);

            commit('GET_VIDEO', json.items[0].snippet)
            commit('SAVE_VIDEO_URL', url)
          } else {
            if (state.badUrlCounter >= 2) {
              commit('SERVER_ERROR_VALIDATEON', { errors: [{ reason: 'badUrlAgain' }] })
            } else {
              commit('SERVER_ERROR_VALIDATEON', { errors: [{ reason: 'badUrl' }] })
            }
          }
        })
        .catch(e => {
          throw e
        })
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    async GET_COMENTS_ACTION({ commit, dispatch, state }, videoURL = state.videoURL, nextPageToken = state.pageToken) {
      const apiKey = state.apiKey;
      await fetch(`https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}&videoId=${videoURL}&maxResults=100&textFormat=plainText&pageToken=${nextPageToken}`)
        .then(res => res.json())
        .then(json => {
          if (json.error) {
            commit('SERVER_ERROR_VALIDATEON', json.error)
          }
          console.log('json.items', json.items);

          if (json.nextPageToken) {
            commit('PUSH_COMENTS', json.items)
            commit('SAVE_PAGE_TOKEN', json.nextPageToken)
            setTimeout(() => {
              dispatch('GET_COMENTS_ACTION', videoURL, json.nextPageToken)
            }, 5000)
          } else {
            commit('PUSH_COMENTS', json.items)
            dispatch('GET_COMMENTATORS_ID_ACTION')
          }
        })
        .catch(e => {
          throw e
        })

    },

    // –ü–æ–∫–∞–∑ –∏–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    SHOW_COMMENTS_ACTION({ commit, dispatch }) {
      dispatch('GET_COMENTS_ACTION')
      commit('SHOW_COMMENTS')
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SAVE_INCLUDED_TEXT_ACTION({ commit }, v) {
      commit('SAVE_INCLUDED_TEXT', v)
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    SAVE_FILTRED_DATE_ACTION({ commit }, v) {
      commit('SAVE_INCLUDED_DATE', v)
    },

  },
  getters: {
    COMMENTS(state) {
      return state.comments
    },
    ERROR_MSG(state) {
      return state.errorsMSG
    },
    VIDEO(state) {
      return state.video
    },
    WRONG_API_KEY(state) {
      return state.wrongAPIKey
    },
    API(state) {
      return state.apiKey
    },
    BAD_URL(state) {
      return state.badUrl
    },
    LIMIT_EXCEEDED(state) {
      return state.limitExceededFlag
    },
    LIMIT_EXCEEDED_MSG(state) {
      return state.limitExceededMsg
    },
    SHOW_COMMETS_FLAG(state) {
      return state.sowComments
    },
    DATE_TO_FILTER(state) {
      return state.dateToFilter
    },
    TEXT_TO_FILTER(state) {
      return state.textToFilter
    }
  },
})
